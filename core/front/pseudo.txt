THIS PSEUDO CODE SIMULATES A SAMPLE SITUATION BUT IS NOT PSEUDO FOR GENERAL CASES (PROBABLY CODE FOR CONSOLE)
(THIS PSEUDO CODE PROVIDES ALGORITHIM AND NOT RENDER FUNCIONALITY)
-------------------------------------------------------------------------------------------------------------

// 1 = wall
// 0 = open space
// LETS IN THIS CODE ARE JUST PLACEHOLDERS VARIABLE NAMES WILL VARY

let 2darray = [
    [ 0  0  0  0  0  0  0  0  0  0 ]
    [ 0  0  0  0  0  0  0  0  0  0 ]
    [ 0  0  0  1  1  0  0  0  0  0 ] 
    [ 0  0  0  1  1  1  0  0  0  0 ] 
    [ 0  0  1  1  1  1  1  0  0  0 ]
    [ 0  0  0  0  1  1  0  0  0  0 ]
    [ 0  0  0  0  0  0  0  0  0  0 ]
    [ 0  0  0  0  0  0  0  0  0  0 ] 
    [ 0  0  0  0  0  0  0  0  0  0 ] 
    [ 0  0  0  0  0  0  0  0  0  0 ]  
]


// returns length of 2d array, then we subtract 6 to get index of 5 for reference to the 5th row,
// then we get the length of the first row (does not matter which row because all rows have same 
// amount of items) in the 2d array, then we subtract one to get the index of the last item (the 10th one)
// which is an index of 9

let goalA = [len(2darray) -6, len(2darray[0] -1]




// cost function: f(n) = g(n) + h(n)

/* 
 * f(n) is cost
 * g(n) is cost for moving one step
 * h(n) is heuristic of (n)
*/

steps =>
1. compute heuristic model of grid
2. determine policies for each point based on cost


BUILDING HEURISTIC MODEL

// 2d array of possible moves
let delta = [
             [-1, 0] # go up
             [0, -1] # go left      
             [1, 0]  # go down     
             [0, 1]  # go right     
]
let delta_name = ['^', '<', 'v', '>']

ACTION

// return 2darray value that contains the heuristic steps to goal
//    ex: [14, 99, 12, 99, 10] [13, 99, 11, 99, 9] [12, 11, 10, 99, 8]
computeValue(grid, goal, cost) {
    let value = []
    value = 2darray
    value[0][0] = 99

    let visited = []
    let count = 0
    let x = goalA[0]
    let y = goalA[1]
    let point = [count, y, x]
    visited.append(point)
    let allChecked = false
    let index = 0
    count = 1
    while (!allChecked) {
        currentPoint =  visited[index]
        index++
        //populate neighbors
        neighborList = [];
        for (each move of delta) {
            newPoint = currentPoint + move // move in direction from delta
            if (newPoint is in grid, not barrier, and not already visited) {
                append newPoint to neighborList
            }
        }
    }
    for each n in neighborList {
        let newX = x of n
        let newY = y of n
        let c = value[currentPoint] + 1
        let newPoint = [c, newY, newX]
        visited.appen(newPoint)
        value[newY][newX] = c
    }
    // exit if all visited
    if index > length of visited -1 {
        allChecked = true
    }


    for d of value loop of (all columns in value) {}
            for i of value[d] loop of (all values in value) {
                if value[i][i] === 0 {
                    value[i][i] = 99
                }
            }
}
    // for setting coordinate of goal to 0
    let goalInValue1stValue = goalA[0]
    let goalInValue2stValue = goalA[1]
    value[goalInValue1stValue][goalInValue2stValue] = 0;

    // returning for function
    return value
}

FINDING PATH

// finds goal as a reference point
let ranFunction = compute_value(2darray, goalA, 1)

let path = []

for i of ranFunction {
    for d of ranFunction[i]{
        if ranFunction[i][d] === 0 {
            let reference = ranFunction[i][d]
            path.pushToEnd(reference)
        }
    }
}

2d loop through values around reference, then follow value with least cost assign it to VARIABLE,
 and path.unShift( the new variable)